pipeline {
    agent any
    
    // Define environment variables
    environment {
        GIT_REPO = 'https://github.com/AntoninLmp/Devops_KLEA.git'
        DOCKER_REGISTRY='devopsklea/st2dce-service'
        KUBE_NAMESPACE = 'development'
    }    

    stages {
        // Clone the Git repository
        stage('Git Clone') {
            steps {
                git branch: 'main', url: "${GIT_REPO}"
            }
        }

        // Edit pom.xml version
        stage('Update build number in pom.xml') {
            steps {
                script {
                    // Read the current pom.xml content
                    def pomContent = readFile('pom.xml')

                    // Update the version with the build number
                    pomContent = pomContent.replaceAll('<version>0.0.1-SNAPSHOT</version>', "<version>${env.BUILD_NUMBER}-SNAPSHOT</version>")

                    // Write the updated content back to the pom.xml
                    writeFile(file: 'pom.xml', text: pomContent)
                }
            }
        }


        // Create docker hub credentials id
        stage('Create credentials id') {
            steps {
                script {
                    dockerRegistryCredentials = credentials(binding: 'dockerhub', usernameVariable: 'devopsklea', passwordVariable: '~~LJ7PXf%i$2zYNLjE')
                    DOCKER_REGISTRY_CREDENTIALS_ID = dockerRegistryCredentials.id
                }
            }
        }
        
        // Build and tag the Docker image
        stage('Build Docker Image') {
            steps {
                script {
                    docker.withRegistry("${DOCKER_REGISTRY}", DOCKER_REGISTRY_CREDENTIALS_ID) {
                        def customImage = docker.build("${DOCKER_REGISTRY}/klea-app:latest --build-arg=${env.BUILD_NUMBER}", "Dockerfile")
                        customImage.push()
                    }
                }
            }
        }

        // Create kubeconfig credentials id if it doesn't exist (connect to localhost cluster)
        stage('Create kubeconfig credentials id') {
            steps {
                script {
                    kubeConfigCredentials = credentials(binding: 'kubeconfig', usernameVariable: 'admin', passwordVariable: 'admin')
                    KUBECONFIG_CREDENTIALS_ID = kubeConfigCredentials.id
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    withKubeConfig([credentialsId: KUBECONFIG_CREDENTIALS_ID]) {
                        sh "cd k8s/klea-app"
                        sh "kubectl create namespace ${KUBE_NAMESPACE}"
                        sh "kubectl apply -f k8s/service.yaml -n ${KUBE_NAMESPACE}"
                        sh "kubectl apply -f k8s/deployment.yaml -n ${KUBE_NAMESPACE}"
                    }
                }
            }
        }


        // Clean up the workspace
        stage('Clean up') {
            steps {
                sh "docker system prune -f"
            }
        }
    }
}
